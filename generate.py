from util import *
from constants import *
from SongRNN import *
import torch
import torch.optim as optim
import torch.nn as nn
import numpy as np

def generate_song(model, device, char_idx_map, max_len=1000, temp=0.8, prime_str='<start>', show_heatmap=False):
    """
    Generates a song using the provided model.

    Parameters:
    - model (nn.Module): The trained model used for generating the song
    - device (torch.device): The device (e.g., "cpu" or "cuda") on which the model is located
    - char_idx_map (dict): A map of characters to their index
    - max_len (int): The maximum length of the generated song
    - temp (float): Temperature parameter for temperature scaling during sampling
    - prime_str (str): Initialize the beginning of the song

    Returns:
    - generated_song (str): The generated song as a string
    """

    #Move model to the specified device and set the model to evaluation mode
    model.to(device)
    model.eval()

    # Initialize the hidden state
    model.init_hidden()
    idx_to_char = {v: k for k, v in char_idx_map.items()}
    

    with torch.no_grad(): # we don't need to calculate the gradient in the validation/testing
        # "build up" hidden state using the beginging of a song '<start>'
        generated_song = prime_str
        for i in range(len(prime_str)):
            c_input = characters_to_tensor(prime_str[i], char_idx_map).to(device)
            _ = model(c_input)

        '''
        TODOs: 
            - Continue generating the rest of the sequence until reaching the maximum length or encountering the end token.
            - Incorporate the temperature parameter to determine the generated/predicted character.
            - Add the generated character to the `generated_song` and then return `generated_song`.
        '''
        for i in range(max_len):
            # Get the last character in the generated song
            last_char = characters_to_tensor(generated_song[-1], char_idx_map).to(device)
            # Get the output and hidden state from the model
            output, _ = model(last_char)
            #output is a tuple of (output, hidden_state)
            # Apply temperature scaling
            #output is a tuple so .data does not work
            output_dist = output.data.view(-1).div(temp).exp()
            # Sample the next character
            top_i = torch.multinomial(output_dist, 1)[0]
            # Add the sampled character to the generated song
            generated_song += idx_to_char[top_i.item()]
            # If the sampled character is the end token, stop generating the song
            if idx_to_char[top_i.item()] == '<end>':
                generated_song += idx_to_char[top_i.item()]
                break
        
        if generated_song[:-6] != '<end>':
            generated_song += '<end>'
    # Turn the model back to training mode
    model.train()


    if show_heatmap:
        heatmap_tensor_for_each_char = []
        print(len(generated_song))
        for char in generated_song:
            tensor = characters_to_tensor(char, char_idx_map).to(device)
            _, layer_activation = model.forward(tensor)
            heatmap_tensor_for_each_char.append(layer_activation[0])
        heatmap_tensor_for_each_char = torch.stack(heatmap_tensor_for_each_char)
        generate_heatmap(generated_song, heatmap_tensor_for_each_char, 50)
    
    return generated_song
            
def generate_heatmap(generated_song, heatmap, neuron_idx=0):
    """
    Generates a heatmap using the provided generated song, heatmap chart values and neuron id.

    Parameters:
    - generated_song (nn.Module): The song generated by a trained model.
    - heatmap (torch.Tensor): heatmap/activation values from a particular layer of the trained model.
    - neuron_idx (int): id of the neuron to plot heatmap for.

    Returns:
        None
    """
    pad_factor = 20
    heatmap = heatmap.detach().numpy()

    data = np.append(heatmap[:,neuron_idx], 0.0)
    #print(data)
    padded_song, padded_data = pad(generated_song, data, pad_factor=pad_factor)

    padded_song = np.reshape(padded_song, (len(padded_song)//pad_factor, pad_factor))
    padded_data = np.reshape(padded_data, (len(padded_data)//pad_factor, pad_factor))

    plt.figure(figsize=(heatmap.shape[0]//4,heatmap.shape[1]//4))
    plt.title(f"Heatmap For Song RNN, Neuron ID: {neuron_idx}")
    heatplot = plt.pcolor(padded_data, edgecolors='k', linewidths=4, cmap='RdBu_r', vmin=-1.0, vmax=1.0)

    show_values(heatplot, song=padded_song)
    plt.colorbar(heatplot)
    plt.gca().invert_yaxis()
    plt.savefig(f"./plots/heatmap_{neuron_idx}.png")
    print(f"==> Heatmap saved for Neuron ID: {neuron_idx}..")
    return
